# -*- coding: utf-8 -*-
"""endtoend.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16wzU1v6b-gV2vYeUoiDzCLkWQFZOwkYW
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.datasets import fetch_california_housing
california = fetch_california_housing()

california.keys()
print(california.DESCR)

print(california.frame)

dataset = pd.DataFrame(california.data, columns = california.feature_names)
dataset.head()

dataset['Price'] = california.target
dataset.head()

dataset.info()

dataset.describe()

dataset.isnull().sum()

dataset.corr()

import seaborn as sns
sns.pairplot(dataset)

plt.scatter(dataset['MedInc'], dataset['Price'])
plt.xlabel('MedInc')
plt.ylabel('price')

sns.regplot(x = "AveOccup" ,y= "Price", data = dataset)

X = dataset.iloc[:,:-1]
Y = dataset.iloc[:,-1]

from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.3, random_state = 40)

Y_train

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)
X_train

import pickle 
pickle.dump(scaler, open('scaler.pkl', 'wb'))


from sklearn.linear_model import LinearRegression
regression = LinearRegression()
regression.fit(X_train,Y_train)

print(regression.coef_)
print(regression.intercept_)
regression.get_params()

reg_predic = regression.predict(X_test)
reg_predic

plt.scatter(Y_test, reg_predic)

residual = Y_test - reg_predic
residual

sns.displot(residual, kind= 'kde')

plt.scatter(reg_predic , residual)

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error


print(mean_squared_error(Y_test,reg_predic))
print(mean_absolute_error(Y_test,reg_predic))
print(np.sqrt(mean_squared_error(Y_test,reg_predic)))

from sklearn.metrics import r2_score
score = r2_score(Y_test, reg_predic)
score

Ajustable_R2 = 1- (1-score)*(len(Y_test)-1)/(len(Y_test)-X_test.shape[1]-1)
Ajustable_R2
# alway lest the R2

california.data[0].reshape(1,-1)

std = scaler.transform(california.data[0].reshape(1,-1))

regression.predict(std)

import pickle
pickle.dump(regression , open('regmodel.pkl', 'wb'))

pickle_model = pickle.load(open('regmodel.pkl', 'rb'))

pickle_model.predict(std)















